/*
export class SimpleSocketManagerMany extends SocketManager {
    constructor(socketServer: Server) {
        super(socketServer);
    }
 
       // Only emit case
    @Answer()
    async hail_async(msg: string) {
           console.log("Starting hail_async");
           await Promise.resolve('');
           console.log(`I emiting \"${msg}\" over [hail_async]`);
           return msg;
    }

    @AnswerMany()
    *hail_many(msgs: string[]) {
        console.log("Starting hail_many");
        for (let t of msgs.map( ( msg, i)=> [`msg_${i}`, msg]) )           
            yield(t)        
            
    }
    @AnswerMany()
    async *hail_many_async(msgs: string[]) {
        console.log("Starting hail_many_async");
        for (let t of msgs.map( ( msg, i)=> [`async_msg_${i}`, msg] ) )
            yield await Promise.resolve(t);
           
    }
}
*/